generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text()
  expiresAt DateTime
}

model User {
  id             String       @id @default(cuid())
  installationId String?      @unique
  githubId       String       @unique
  name           String
  email          String       @unique
  role           Role         @default(user)
  verified       Boolean      @default(false)
  provider       String       @default("local")
  photo          String
  createdAt      DateTime
  updatedAt      DateTime     @updatedAt
  Project        Project[]
  ProjectACL     ProjectACL[]

  @@map(name: "users")
}

model Project {
  id              String           @id @default(cuid())
  repository      String
  displayName     String
  framework       String
  userId          String
  slug            String
  createdAt       DateTime         @default(now())
  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  BuildParameter  BuildParameter[]
  environment     Environment[]
  port            Int              @default(3000)
  basePath        String?
  keepDeployments Boolean          @default(false)
  acl             ProjectACL[]

  @@unique([repository, userId])
  @@unique([id, userId])
}

model ProjectACL {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      AccessLevel
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  project   Project     @relation(fields: [projectId], references: [id])

  @@unique([projectId, userId])
}

model Deployment {
  id                 String      @id @default(cuid())
  commit             String?
  primary            Boolean
  defaultDomain      String?
  environment        Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId      String
  createdAt          DateTime    @default(now())
  state              State       @default(pending)
  githubDeploymentId Int         @unique
}

model Domain {
  name          String      @id
  default       Boolean     @default(false)
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
}

model Environment {
  id         String       @id @default(cuid())
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  branch     String
  production Boolean
  secretName String?
  deployment Deployment[]
  domain     Domain[]

  @@unique([projectId, branch])
}

model BuildParameter {
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  key       String
  value     String

  @@unique([projectId, key, value])
}

enum Role {
  user
  admin
}

enum AccessLevel {
  read
  write
  admin
}

enum State {
  pending
  success
  failure
  in_progress
  queued
  error
}
